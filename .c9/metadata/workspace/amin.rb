{"filter":false,"title":"amin.rb","tooltip":"/amin.rb","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":17,"column":3},"end":{"row":17,"column":4},"action":"insert","lines":[" "],"id":999}],[{"start":{"row":17,"column":4},"end":{"row":17,"column":5},"action":"insert","lines":["C"],"id":1000}],[{"start":{"row":17,"column":5},"end":{"row":17,"column":6},"action":"insert","lines":["r"],"id":1001}],[{"start":{"row":17,"column":6},"end":{"row":17,"column":7},"action":"insert","lines":["e"],"id":1002}],[{"start":{"row":17,"column":4},"end":{"row":17,"column":7},"action":"remove","lines":["Cre"],"id":1003},{"start":{"row":17,"column":4},"end":{"row":18,"column":0},"action":"insert","lines":["Creature",""]}],[{"start":{"row":17,"column":12},"end":{"row":18,"column":0},"action":"remove","lines":["",""],"id":1004}],[{"start":{"row":17,"column":12},"end":{"row":17,"column":13},"action":"insert","lines":["."],"id":1005}],[{"start":{"row":17,"column":13},"end":{"row":17,"column":14},"action":"insert","lines":["n"],"id":1006}],[{"start":{"row":17,"column":14},"end":{"row":17,"column":15},"action":"insert","lines":["e"],"id":1007}],[{"start":{"row":17,"column":15},"end":{"row":17,"column":16},"action":"insert","lines":["w"],"id":1008}],[{"start":{"row":17,"column":16},"end":{"row":18,"column":0},"action":"insert","lines":["",""],"id":1009}],[{"start":{"row":18,"column":0},"end":{"row":18,"column":1},"action":"insert","lines":["a"],"id":1010}],[{"start":{"row":18,"column":1},"end":{"row":18,"column":2},"action":"insert","lines":["."],"id":1011}],[{"start":{"row":18,"column":2},"end":{"row":18,"column":3},"action":"insert","lines":["f"],"id":1012}],[{"start":{"row":18,"column":3},"end":{"row":18,"column":4},"action":"insert","lines":["i"],"id":1013}],[{"start":{"row":18,"column":4},"end":{"row":18,"column":5},"action":"insert","lines":["g"],"id":1014}],[{"start":{"row":18,"column":5},"end":{"row":18,"column":6},"action":"insert","lines":["h"],"id":1015}],[{"start":{"row":18,"column":6},"end":{"row":18,"column":7},"action":"insert","lines":["t"],"id":1016}],[{"start":{"row":18,"column":0},"end":{"row":18,"column":1},"action":"insert","lines":["p"],"id":1017}],[{"start":{"row":18,"column":1},"end":{"row":18,"column":2},"action":"insert","lines":[" "],"id":1018}],[{"start":{"row":17,"column":16},"end":{"row":17,"column":18},"action":"insert","lines":["()"],"id":1019}],[{"start":{"row":17,"column":17},"end":{"row":17,"column":19},"action":"insert","lines":["\"\""],"id":1020}],[{"start":{"row":17,"column":18},"end":{"row":17,"column":19},"action":"insert","lines":["a"],"id":1021}],[{"start":{"row":17,"column":19},"end":{"row":17,"column":20},"action":"insert","lines":["l"],"id":1022}],[{"start":{"row":17,"column":20},"end":{"row":17,"column":21},"action":"insert","lines":["o"],"id":1023}],[{"start":{"row":18,"column":9},"end":{"row":19,"column":0},"action":"insert","lines":["",""],"id":1024}],[{"start":{"row":19,"column":0},"end":{"row":19,"column":1},"action":"insert","lines":["b"],"id":1025}],[{"start":{"row":19,"column":1},"end":{"row":19,"column":2},"action":"insert","lines":[" "],"id":1026}],[{"start":{"row":19,"column":2},"end":{"row":19,"column":3},"action":"insert","lines":["="],"id":1027}],[{"start":{"row":19,"column":3},"end":{"row":19,"column":4},"action":"insert","lines":[" "],"id":1028}],[{"start":{"row":19,"column":4},"end":{"row":19,"column":5},"action":"insert","lines":["D"],"id":1029}],[{"start":{"row":19,"column":5},"end":{"row":19,"column":6},"action":"insert","lines":["r"],"id":1030}],[{"start":{"row":19,"column":6},"end":{"row":19,"column":7},"action":"insert","lines":["a"],"id":1031}],[{"start":{"row":19,"column":7},"end":{"row":19,"column":8},"action":"insert","lines":["g"],"id":1032}],[{"start":{"row":19,"column":8},"end":{"row":19,"column":9},"action":"insert","lines":["o"],"id":1033}],[{"start":{"row":19,"column":9},"end":{"row":19,"column":10},"action":"insert","lines":["n"],"id":1034}],[{"start":{"row":19,"column":10},"end":{"row":19,"column":11},"action":"insert","lines":["."],"id":1035}],[{"start":{"row":19,"column":11},"end":{"row":19,"column":12},"action":"insert","lines":["n"],"id":1036}],[{"start":{"row":19,"column":12},"end":{"row":19,"column":13},"action":"insert","lines":["e"],"id":1037}],[{"start":{"row":19,"column":13},"end":{"row":19,"column":14},"action":"insert","lines":["w"],"id":1038}],[{"start":{"row":19,"column":14},"end":{"row":19,"column":16},"action":"insert","lines":["()"],"id":1039}],[{"start":{"row":19,"column":15},"end":{"row":19,"column":17},"action":"insert","lines":["\"\""],"id":1040}],[{"start":{"row":19,"column":16},"end":{"row":19,"column":17},"action":"insert","lines":["l"],"id":1041}],[{"start":{"row":19,"column":17},"end":{"row":19,"column":18},"action":"insert","lines":["o"],"id":1042}],[{"start":{"row":19,"column":18},"end":{"row":19,"column":19},"action":"insert","lines":["a"],"id":1043}],[{"start":{"row":19,"column":21},"end":{"row":20,"column":0},"action":"insert","lines":["",""],"id":1044}],[{"start":{"row":20,"column":0},"end":{"row":20,"column":1},"action":"insert","lines":["p"],"id":1045}],[{"start":{"row":20,"column":1},"end":{"row":20,"column":2},"action":"insert","lines":[" "],"id":1046}],[{"start":{"row":20,"column":2},"end":{"row":20,"column":3},"action":"insert","lines":["b"],"id":1047}],[{"start":{"row":20,"column":3},"end":{"row":20,"column":4},"action":"insert","lines":["."],"id":1048}],[{"start":{"row":20,"column":4},"end":{"row":20,"column":5},"action":"insert","lines":["f"],"id":1049}],[{"start":{"row":20,"column":5},"end":{"row":20,"column":6},"action":"insert","lines":["i"],"id":1050}],[{"start":{"row":20,"column":6},"end":{"row":20,"column":7},"action":"insert","lines":["g"],"id":1051}],[{"start":{"row":20,"column":7},"end":{"row":20,"column":8},"action":"insert","lines":["h"],"id":1052}],[{"start":{"row":20,"column":8},"end":{"row":20,"column":9},"action":"insert","lines":["t"],"id":1053}],[{"start":{"row":14,"column":8},"end":{"row":15,"column":0},"action":"insert","lines":["",""],"id":1054},{"start":{"row":15,"column":0},"end":{"row":15,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":14,"column":8},"end":{"row":14,"column":9},"action":"insert","lines":["s"],"id":1055}],[{"start":{"row":14,"column":9},"end":{"row":14,"column":10},"action":"insert","lines":["u"],"id":1056}],[{"start":{"row":14,"column":10},"end":{"row":14,"column":11},"action":"insert","lines":["p"],"id":1057}],[{"start":{"row":14,"column":11},"end":{"row":14,"column":12},"action":"insert","lines":["e"],"id":1058}],[{"start":{"row":14,"column":12},"end":{"row":14,"column":13},"action":"insert","lines":["r"],"id":1059}],[{"start":{"row":0,"column":0},"end":{"row":21,"column":9},"action":"remove","lines":["class Creature","  def initialize(name)","    @name = name","  end","  ","  def fight","    return \"Punch to the chops!\"","  end","end","","# Add your code below!","","class Dragon < Creature","    def fight","        super","        return \"Breathes fire!\"","    end","end","a = Creature.new(\"alo\")","p a.fight","b = Dragon.new(\"loa\")","p b.fight"],"id":1060}],[{"start":{"row":0,"column":0},"end":{"row":14,"column":36},"action":"insert","lines":["class Message","    @@messages_sent = 0","    def initialize(from, to)","        @from = from","        @to = to","        @@messages_sent += 1","    end","end","","class Email < Message","    def initialize(from,to)","        super","    end","end","my_message = Email.new(\"Thai\", \"US\")"],"id":1061}],[{"start":{"row":14,"column":36},"end":{"row":15,"column":0},"action":"insert","lines":["",""],"id":1062}],[{"start":{"row":15,"column":0},"end":{"row":15,"column":1},"action":"insert","lines":["p"],"id":1063}],[{"start":{"row":15,"column":1},"end":{"row":15,"column":2},"action":"insert","lines":[" "],"id":1064}],[{"start":{"row":15,"column":1},"end":{"row":15,"column":2},"action":"remove","lines":[" "],"id":1065}],[{"start":{"row":15,"column":0},"end":{"row":15,"column":1},"action":"remove","lines":["p"],"id":1066}],[{"start":{"row":0,"column":0},"end":{"row":15,"column":0},"action":"remove","lines":["class Message","    @@messages_sent = 0","    def initialize(from, to)","        @from = from","        @to = to","        @@messages_sent += 1","    end","end","","class Email < Message","    def initialize(from,to)","        super","    end","end","my_message = Email.new(\"Thai\", \"US\")",""],"id":1067},{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["p"]}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":["p"],"id":1068},{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":[" "]}],[{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["r"],"id":1069}],[{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"remove","lines":["r"],"id":1070}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":[" "],"id":1071}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["p"],"id":1072}],[{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":[" "],"id":1073}],[{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":["r"],"id":1074}],[{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"insert","lines":["a"],"id":1075}],[{"start":{"row":0,"column":4},"end":{"row":0,"column":5},"action":"insert","lines":["n"],"id":1076}],[{"start":{"row":0,"column":5},"end":{"row":0,"column":6},"action":"insert","lines":["d"],"id":1077}],[{"start":{"row":0,"column":6},"end":{"row":0,"column":8},"action":"insert","lines":["()"],"id":1078}],[{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"insert","lines":["4"],"id":1079}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":9},"action":"remove","lines":["p rand(4)"],"id":1080},{"start":{"row":0,"column":0},"end":{"row":37,"column":0},"action":"insert","lines":["require 'set'"," ","module TicTacToe","  LINES = [[1,2,3],[4,5,6],[7,8,9],[1,4,7],[2,5,8],[3,6,9],[1,5,9],[3,5,7]]"," ","  class Game","    def initialize(player_1_class, player_2_class)","      @board = Array.new(10) # we ignore index 0 for convenience"," ","      @current_player_id = 0","      @players = [player_1_class.new(self, \"X\"), player_2_class.new(self, \"O\")]","      puts \"#{current_player} goes first.\"","    end","    attr_reader :board, :current_player_id"," ","    def play","      loop do","        place_player_marker(current_player)"," ","        if player_has_won?(current_player)","          puts \"#{current_player} wins!\"","          print_board","          return","        elsif board_full?","          puts \"It's a draw.\"","          print_board","          return","        end"," ","        switch_players!","      end","    end"," ","    def free_positions","      Set.new((1..9).select {|position| @board[position].nil?})","    end"," ",""]}],[{"start":{"row":37,"column":0},"end":{"row":72,"column":1},"action":"insert","lines":["def place_player_marker(player)","      position = player.select_position!","      puts \"#{player} selects #{player.marker} position #{position}\"","      @board[position] = player.marker","    end"," ","    def player_has_won?(player)","      LINES.any? do |line|","        line.all? {|position| @board[position] == player.marker}","      end","    end"," ","    def board_full?","      free_positions.empty?","    end"," ","    def other_player_id","      1 - @current_player_id","    end"," ","    def switch_players!","      @current_player_id = other_player_id","    end"," ","    def current_player","      @players[current_player_id]","    end"," ","    def opponent","      @players[other_player_id]","    end"," ","    def turn_num","      10 - free_positions.size","    end"," "],"id":1081}],[{"start":{"row":72,"column":1},"end":{"row":109,"column":1},"action":"insert","lines":[" def print_board","      col_separator, row_separator = \" | \", \"--+---+--\"","      label_for_position = lambda{|position| @board[position] ? @board[position] : position}"," ","      row_for_display = lambda{|row| row.map(&label_for_position).join(col_separator)}","      row_positions = [[1,2,3], [4,5,6], [7,8,9]]","      rows_for_display = row_positions.map(&row_for_display)","      puts rows_for_display.join(\"\\n\" + row_separator + \"\\n\")","    end","  end"," ","  class Player","    def initialize(game, marker)","      @game = game","      @marker = marker","    end","    attr_reader :marker","  end"," ","  class HumanPlayer < Player","    def select_position!","      @game.print_board","      loop do","        print \"Select your #{marker} position: \"","        selection = gets.to_i","        return selection if @game.free_positions.include?(selection)","        puts \"Position #{selection} is not available. Try again.\"","      end","    end"," ","    def to_s","      \"Human\"","    end","  end"," ","  class ComputerPlayer < Player","    DEBUG = false # edit this line if necessary"," "],"id":1082}],[{"start":{"row":109,"column":1},"end":{"row":146,"column":7},"action":"insert","lines":["def group_positions_by_markers(line)","      markers = line.group_by {|position| @game.board[position]}","      markers.default = []","      markers","    end"," ","    def select_position!","      opponent_marker = @game.opponent.marker"," ","      winning_or_blocking_position = look_for_winning_or_blocking_position(opponent_marker)","      return winning_or_blocking_position if winning_or_blocking_position"," ","      if corner_trap_defense_needed?","        return corner_trap_defense_position(opponent_marker)","      end"," ","      # could make this smarter by sometimes doing corner trap offense"," ","      return random_prioritized_position","    end"," ","    def look_for_winning_or_blocking_position(opponent_marker)","      for line in LINES","        markers = group_positions_by_markers(line)","        next if markers[nil].length != 1","        if markers[self.marker].length == 2","          log_debug \"winning on line #{line.join}\"","          return markers[nil].first","        elsif markers[opponent_marker].length == 2","          log_debug \"could block on line #{line.join}\"","          blocking_position = markers[nil].first","        end","      end","      if blocking_position","        log_debug \"blocking at #{blocking_position}\"","        return blocking_position","      end","    end"],"id":1083}],[{"start":{"row":146,"column":7},"end":{"row":181,"column":4},"action":"insert","lines":["def corner_trap_defense_needed?","      corner_positions = [1, 3, 7, 9]","      opponent_chose_a_corner = corner_positions.any?{|pos| @game.board[pos] != nil}","      return @game.turn_num == 2 && opponent_chose_a_corner","    end"," ","    def corner_trap_defense_position(opponent_marker)","      # if you respond in the center or the opposite corner, the opponent can force you to lose","      log_debug \"defending against corner start by playing adjacent\"","      # playing in an adjacent corner could also be safe, but would require more logic later on","      opponent_position = @game.board.find_index {|marker| marker == opponent_marker}","      safe_responses = {1=>[2,4], 3=>[2,6], 7=>[4,8], 9=>[6,8]}","      return safe_responses[opponent_position].sample","    end"," ","    def random_prioritized_position","      log_debug \"picking random position, favoring center and then corners\"","      ([5] + [1,3,7,9].shuffle + [2,4,6,8].shuffle).find do |pos|","        @game.free_positions.include?(pos)","      end","    end"," ","    def log_debug(message)","      puts \"#{self}: #{message}\" if DEBUG","    end"," ","    def to_s","      \"Computer#{@game.current_player_id}\"","    end","  end","end"," ","include TicTacToe"," ","Game.new(ComputerPlayer, ComputerPlayer).play","puts"],"id":1084}],[{"start":{"row":181,"column":4},"end":{"row":182,"column":34},"action":"insert","lines":["players_with_human = [HumanPlayer, ComputerPlayer].shuffle","Game.new(*players_with_human).play"],"id":1085}],[{"start":{"row":180,"column":45},"end":{"row":181,"column":0},"action":"insert","lines":["",""],"id":1086}],[{"start":{"row":180,"column":45},"end":{"row":181,"column":0},"action":"remove","lines":["",""],"id":1087}],[{"start":{"row":181,"column":4},"end":{"row":181,"column":5},"action":"insert","lines":[" "],"id":1088}],[{"start":{"row":181,"column":5},"end":{"row":182,"column":0},"action":"insert","lines":["",""],"id":1089}],[{"start":{"row":146,"column":7},"end":{"row":147,"column":0},"action":"insert","lines":["",""],"id":1090},{"start":{"row":147,"column":0},"end":{"row":147,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":109,"column":1},"end":{"row":109,"column":4},"action":"insert","lines":["   "],"id":1091}],[{"start":{"row":72,"column":2},"end":{"row":72,"column":4},"action":"insert","lines":["  "],"id":1092}],[{"start":{"row":37,"column":0},"end":{"row":37,"column":2},"action":"insert","lines":["  "],"id":1094}],[{"start":{"row":37,"column":2},"end":{"row":37,"column":4},"action":"insert","lines":["  "],"id":1095}],[{"start":{"row":182,"column":0},"end":{"row":183,"column":0},"action":"remove","lines":["puts ",""],"id":1096}],[{"start":{"row":0,"column":0},"end":{"row":183,"column":34},"action":"remove","lines":["require 'set'"," ","module TicTacToe","  LINES = [[1,2,3],[4,5,6],[7,8,9],[1,4,7],[2,5,8],[3,6,9],[1,5,9],[3,5,7]]"," ","  class Game","    def initialize(player_1_class, player_2_class)","      @board = Array.new(10) # we ignore index 0 for convenience"," ","      @current_player_id = 0","      @players = [player_1_class.new(self, \"X\"), player_2_class.new(self, \"O\")]","      puts \"#{current_player} goes first.\"","    end","    attr_reader :board, :current_player_id"," ","    def play","      loop do","        place_player_marker(current_player)"," ","        if player_has_won?(current_player)","          puts \"#{current_player} wins!\"","          print_board","          return","        elsif board_full?","          puts \"It's a draw.\"","          print_board","          return","        end"," ","        switch_players!","      end","    end"," ","    def free_positions","      Set.new((1..9).select {|position| @board[position].nil?})","    end"," ","    def place_player_marker(player)","      position = player.select_position!","      puts \"#{player} selects #{player.marker} position #{position}\"","      @board[position] = player.marker","    end"," ","    def player_has_won?(player)","      LINES.any? do |line|","        line.all? {|position| @board[position] == player.marker}","      end","    end"," ","    def board_full?","      free_positions.empty?","    end"," ","    def other_player_id","      1 - @current_player_id","    end"," ","    def switch_players!","      @current_player_id = other_player_id","    end"," ","    def current_player","      @players[current_player_id]","    end"," ","    def opponent","      @players[other_player_id]","    end"," ","    def turn_num","      10 - free_positions.size","    end","    def print_board","      col_separator, row_separator = \" | \", \"--+---+--\"","      label_for_position = lambda{|position| @board[position] ? @board[position] : position}"," ","      row_for_display = lambda{|row| row.map(&label_for_position).join(col_separator)}","      row_positions = [[1,2,3], [4,5,6], [7,8,9]]","      rows_for_display = row_positions.map(&row_for_display)","      puts rows_for_display.join(\"\\n\" + row_separator + \"\\n\")","    end","  end"," ","  class Player","    def initialize(game, marker)","      @game = game","      @marker = marker","    end","    attr_reader :marker","  end"," ","  class HumanPlayer < Player","    def select_position!","      @game.print_board","      loop do","        print \"Select your #{marker} position: \"","        selection = gets.to_i","        return selection if @game.free_positions.include?(selection)","        puts \"Position #{selection} is not available. Try again.\"","      end","    end"," ","    def to_s","      \"Human\"","    end","  end"," ","  class ComputerPlayer < Player","    DEBUG = false # edit this line if necessary","    def group_positions_by_markers(line)","      markers = line.group_by {|position| @game.board[position]}","      markers.default = []","      markers","    end"," ","    def select_position!","      opponent_marker = @game.opponent.marker"," ","      winning_or_blocking_position = look_for_winning_or_blocking_position(opponent_marker)","      return winning_or_blocking_position if winning_or_blocking_position"," ","      if corner_trap_defense_needed?","        return corner_trap_defense_position(opponent_marker)","      end"," ","      # could make this smarter by sometimes doing corner trap offense"," ","      return random_prioritized_position","    end"," ","    def look_for_winning_or_blocking_position(opponent_marker)","      for line in LINES","        markers = group_positions_by_markers(line)","        next if markers[nil].length != 1","        if markers[self.marker].length == 2","          log_debug \"winning on line #{line.join}\"","          return markers[nil].first","        elsif markers[opponent_marker].length == 2","          log_debug \"could block on line #{line.join}\"","          blocking_position = markers[nil].first","        end","      end","      if blocking_position","        log_debug \"blocking at #{blocking_position}\"","        return blocking_position","      end","    end","    def corner_trap_defense_needed?","      corner_positions = [1, 3, 7, 9]","      opponent_chose_a_corner = corner_positions.any?{|pos| @game.board[pos] != nil}","      return @game.turn_num == 2 && opponent_chose_a_corner","    end"," ","    def corner_trap_defense_position(opponent_marker)","      # if you respond in the center or the opposite corner, the opponent can force you to lose","      log_debug \"defending against corner start by playing adjacent\"","      # playing in an adjacent corner could also be safe, but would require more logic later on","      opponent_position = @game.board.find_index {|marker| marker == opponent_marker}","      safe_responses = {1=>[2,4], 3=>[2,6], 7=>[4,8], 9=>[6,8]}","      return safe_responses[opponent_position].sample","    end"," ","    def random_prioritized_position","      log_debug \"picking random position, favoring center and then corners\"","      ([5] + [1,3,7,9].shuffle + [2,4,6,8].shuffle).find do |pos|","        @game.free_positions.include?(pos)","      end","    end"," ","    def log_debug(message)","      puts \"#{self}: #{message}\" if DEBUG","    end"," ","    def to_s","      \"Computer#{@game.current_player_id}\"","    end","  end","end"," ","include TicTacToe"," ","Game.new(ComputerPlayer, ComputerPlayer).play","players_with_human = [HumanPlayer, ComputerPlayer].shuffle","Game.new(*players_with_human).play"],"id":1097}],[{"start":{"row":0,"column":0},"end":{"row":183,"column":34},"action":"remove","lines":["require 'set'"," ","module TicTacToe","  LINES = [[1,2,3],[4,5,6],[7,8,9],[1,4,7],[2,5,8],[3,6,9],[1,5,9],[3,5,7]]"," ","  class Game","    def initialize(player_1_class, player_2_class)","      @board = Array.new(10) # we ignore index 0 for convenience"," ","      @current_player_id = 0","      @players = [player_1_class.new(self, \"X\"), player_2_class.new(self, \"O\")]","      puts \"#{current_player} goes first.\"","    end","    attr_reader :board, :current_player_id"," ","    def play","      loop do","        place_player_marker(current_player)"," ","        if player_has_won?(current_player)","          puts \"#{current_player} wins!\"","          print_board","          return","        elsif board_full?","          puts \"It's a draw.\"","          print_board","          return","        end"," ","        switch_players!","      end","    end"," ","    def free_positions","      Set.new((1..9).select {|position| @board[position].nil?})","    end"," ","    def place_player_marker(player)","      position = player.select_position!","      puts \"#{player} selects #{player.marker} position #{position}\"","      @board[position] = player.marker","    end"," ","    def player_has_won?(player)","      LINES.any? do |line|","        line.all? {|position| @board[position] == player.marker}","      end","    end"," ","    def board_full?","      free_positions.empty?","    end"," ","    def other_player_id","      1 - @current_player_id","    end"," ","    def switch_players!","      @current_player_id = other_player_id","    end"," ","    def current_player","      @players[current_player_id]","    end"," ","    def opponent","      @players[other_player_id]","    end"," ","    def turn_num","      10 - free_positions.size","    end","    def print_board","      col_separator, row_separator = \" | \", \"--+---+--\"","      label_for_position = lambda{|position| @board[position] ? @board[position] : position}"," ","      row_for_display = lambda{|row| row.map(&label_for_position).join(col_separator)}","      row_positions = [[1,2,3], [4,5,6], [7,8,9]]","      rows_for_display = row_positions.map(&row_for_display)","      puts rows_for_display.join(\"\\n\" + row_separator + \"\\n\")","    end","  end"," ","  class Player","    def initialize(game, marker)","      @game = game","      @marker = marker","    end","    attr_reader :marker","  end"," ","  class HumanPlayer < Player","    def select_position!","      @game.print_board","      loop do","        print \"Select your #{marker} position: \"","        selection = gets.to_i","        return selection if @game.free_positions.include?(selection)","        puts \"Position #{selection} is not available. Try again.\"","      end","    end"," ","    def to_s","      \"Human\"","    end","  end"," ","  class ComputerPlayer < Player","    DEBUG = false # edit this line if necessary","    def group_positions_by_markers(line)","      markers = line.group_by {|position| @game.board[position]}","      markers.default = []","      markers","    end"," ","    def select_position!","      opponent_marker = @game.opponent.marker"," ","      winning_or_blocking_position = look_for_winning_or_blocking_position(opponent_marker)","      return winning_or_blocking_position if winning_or_blocking_position"," ","      if corner_trap_defense_needed?","        return corner_trap_defense_position(opponent_marker)","      end"," ","      # could make this smarter by sometimes doing corner trap offense"," ","      return random_prioritized_position","    end"," ","    def look_for_winning_or_blocking_position(opponent_marker)","      for line in LINES","        markers = group_positions_by_markers(line)","        next if markers[nil].length != 1","        if markers[self.marker].length == 2","          log_debug \"winning on line #{line.join}\"","          return markers[nil].first","        elsif markers[opponent_marker].length == 2","          log_debug \"could block on line #{line.join}\"","          blocking_position = markers[nil].first","        end","      end","      if blocking_position","        log_debug \"blocking at #{blocking_position}\"","        return blocking_position","      end","    end","    def corner_trap_defense_needed?","      corner_positions = [1, 3, 7, 9]","      opponent_chose_a_corner = corner_positions.any?{|pos| @game.board[pos] != nil}","      return @game.turn_num == 2 && opponent_chose_a_corner","    end"," ","    def corner_trap_defense_position(opponent_marker)","      # if you respond in the center or the opposite corner, the opponent can force you to lose","      log_debug \"defending against corner start by playing adjacent\"","      # playing in an adjacent corner could also be safe, but would require more logic later on","      opponent_position = @game.board.find_index {|marker| marker == opponent_marker}","      safe_responses = {1=>[2,4], 3=>[2,6], 7=>[4,8], 9=>[6,8]}","      return safe_responses[opponent_position].sample","    end"," ","    def random_prioritized_position","      log_debug \"picking random position, favoring center and then corners\"","      ([5] + [1,3,7,9].shuffle + [2,4,6,8].shuffle).find do |pos|","        @game.free_positions.include?(pos)","      end","    end"," ","    def log_debug(message)","      puts \"#{self}: #{message}\" if DEBUG","    end"," ","    def to_s","      \"Computer#{@game.current_player_id}\"","    end","  end","end"," ","include TicTacToe"," ","Game.new(ComputerPlayer, ComputerPlayer).play","players_with_human = [HumanPlayer, ComputerPlayer].shuffle","Game.new(*players_with_human).play"],"id":1098}],[{"start":{"row":0,"column":0},"end":{"row":3,"column":8},"action":"insert","lines":["def initialize","  @space = Array.new(9)","end","p @space"],"id":1099}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":1100}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":1,"column":0},"end":{"row":1,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":true,"wrapToView":true},"firstLineState":0},"timestamp":1459234994410,"hash":"7ddedfc2950e81f142c1e5516c6f40a09f355c0e"}